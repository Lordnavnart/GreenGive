generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

/**
 * ======================= Enums =======================
 */
enum Role {
  USER
  ADMIN
  ORG
}

enum OrgStatus {
  ACTIVE
  INACTIVE
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  CLOSED
  COMPLETED
}

enum PaymentMethod {
  STRIPE
  VNPAY
  MOMO
  PAYPAL
  MANUAL
}

enum DonationStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

/**
 * ======================= Models =======================
 */

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String?  @map("password") // <= map về cột password hiện có
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  donations Donation[]
}

model Organization {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  logoUrl     String?
  website     String?
  phone       String?
  email       String?
  address     String?
  status      OrgStatus @default(ACTIVE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  campaigns Campaign[]
}

model Category {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaigns Campaign[]
}

model Campaign {
  id          String         @id @default(cuid())
  title       String
  description String?
  cover       String?
  goal        Decimal        @db.Decimal(19, 0)
  startAt     DateTime?
  endAt       DateTime?
  status      CampaignStatus @default(ACTIVE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  org   Organization @relation(fields: [orgId], references: [id])
  orgId String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  donations Donation[]

  // ✅ Back-relations (bắt buộc để tránh P1012)
  images  CampaignImage[]
  updates ProgressUpdate[]
}

model Donation {
  id         String   @id @default(cuid())
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  name        String?
  message     String?
  isAnonymous Boolean        @default(false)
  amount      Decimal        @db.Decimal(19, 0)
  method      PaymentMethod
  status      DonationStatus @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model CampaignImage {
  id         String   @id @default(cuid())
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  url        String
  caption    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([campaignId])
}

model ProgressUpdate {
  id         String   @id @default(cuid())
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  percent    Int // 0..100
  content    String? // mô tả ngắn cập nhật
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([campaignId])
}
